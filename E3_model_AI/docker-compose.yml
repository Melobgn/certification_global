version: '3.8'

networks:
  monitoring_network:
    driver: bridge

services:
  api:
    build:
      context: .
      dockerfile: api_ml/Dockerfile  # Modifier le chemin vers le bon Dockerfile
    ports:
      - "8000:8000"
    networks:
      - monitoring_network
    volumes:
      - ./api_ml/.env:/app/api_ml/.env  # Charge le fichier .env dans le conteneur
      - ./model_ml:/app/model_ml  # Monte le dossier contenant le modèle
      - ./tests:/app/tests
      - ./monitoring/evidently:/app
    restart: unless-stopped
    env_file:
      - api_ml/.env  # Ajout explicite de l'env pour plus de clarté
    command: ["uvicorn", "api_ml.main_api_ml:app", "--host", "0.0.0.0", "--port", "8000"]

  streamlit:
    build:
      context: . # Nouveau dossier pour l'application Streamlit
      dockerfile: app_streamlit/Dockerfile
    ports:
      - "8501:8501"
    depends_on:
      - api  # Streamlit attend que l'API soit démarrée
    restart: unless-stopped
    networks:
      - monitoring_network
    volumes:
      - ./app_streamlit:/app
    environment:
      - API_URL=http://api:8000
    env_file:
      - api_ml/.env  # Ajout explicite de l'env pour plus de clarté
    command: ["streamlit", "run", "app.py", "--server.port=8501", "--server.address=0.0.0.0"]
    
  tests:
    build:
      context: .
      dockerfile: api_ml/Dockerfile  # Utilise la même image que `api`
    networks:
      - monitoring_network
    volumes:
      - ./tests:/app/tests  # Monte le dossier des tests
      - ./model_ml:/app/model_ml  # Monte le modèle
    depends_on:
      - api  # Attend que l'API démarre avant de lancer les tests
    environment:
      - PYTHONPATH=/app
    command: ["pytest", "tests/", "--cov=api_ml", "--cov-report=term-missing"]

  evidently-app:
    build:
      context: .
      dockerfile: monitoring/evidently/Dockerfile
    ports:
      - "8001:8001"
    networks:
      - monitoring_network
      

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"  # Expose Prometheus sur le port 9090
    networks:
      - monitoring_network
    volumes:
      - ./monitoring/prometheus/prometheus_config.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"  # Expose Grafana sur le port 3000
    networks:
      - monitoring_network
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning  # Monte tout le provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password123

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"  # Node Exporter accessible sur ce port
    networks:
      - monitoring_network