name: Run Tests

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          lfs: true 

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install -r E3_model_AI/requirements.txt

      - name: D√©finir les variables d'environnement pour l'authentification
        run: |
          echo "API_USERNAME=${{ secrets.API_USERNAME }}" >> $GITHUB_ENV
          echo "API_PASSWORD=${{ secrets.API_PASSWORD }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=60" >> $GITHUB_ENV

      - name: V√©rifier les fichiers apr√®s le clone
        run: |
          echo "üîç V√©rification des fichiers apr√®s le clone"
          ls -la E3_model_AI/model_ml/

      - name: R√©cup√©rer les fichiers Git LFS (si utilis√©)
        run: git lfs pull

      - name: V√©rifier si le mod√®le XGBoost est bien l√†
        run: |
          if [ ! -f "E3_model_AI/model_ml/xgboost_weapon_classifier.pkl" ]; then
            echo "Le mod√®le XGBoost n'a pas √©t√© trouv√© !"
            exit 1
          fi
          if [ ! -f "E3_model_AI/model_ml/tfidf_vectorizer.pkl" ]; then
            echo "Le vectorizer n'a pas √©t√© trouv√© !"
            exit 1
          fi
          echo "Le mod√®le et le vectorizer sont pr√©sents."

      - name: V√©rifier les variables d'environnement
        run: |
          echo "V√©rification des variables d'environnement"
          echo "API_USERNAME d√©fini : ${{ secrets.API_USERNAME != '' }}"
          echo "API_PASSWORD d√©fini : ${{ secrets.API_PASSWORD != '' }}"
          echo "SECRET_KEY d√©fini : ${{ secrets.SECRET_KEY != '' }}"

      - name: Run Api - ML Tests
        run: |
          pytest E3_model_AI/tests/ --cov=api_ml --cov=model_ml --cov-report=term-missing

      - name: Create logs directory for Django
        run: mkdir -p E4_app_IA/logs

      - name: Run Django tests
        run: |
          cd E4_app_IA
          pip install coverage
          coverage run manage.py test
          coverage report
          coverage html
        env:
          DJANGO_SETTINGS_MODULE: config.settings
          TESTING: "true"
